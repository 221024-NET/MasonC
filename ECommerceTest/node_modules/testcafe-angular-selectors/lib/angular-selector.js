'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _testcafe = require('testcafe');

exports.default = (0, _testcafe.Selector)(function (complexSelector) {
    function validateSelector(selector) {
        if (selector !== void 0 && typeof selector !== 'string') throw new Error(`If the selector parameter is passed it should be a string, but it was ${typeof selector}`);
    }

    validateSelector(complexSelector);

    // NOTE: Angular version 9 or higher
    var walkingNativeElementsMode = window.ng && typeof window.ng.getComponent === 'function';
    // NOTE: Angular version 8 or lower
    var walkingDebugElementsMode = window.ng && typeof window.ng.probe === 'function';

    var isPageReadyForTesting = (walkingNativeElementsMode || walkingDebugElementsMode) && typeof window.getAllAngularRootElements === 'function';

    if (!isPageReadyForTesting) {
        throw new Error(`The tested page does not use Angular or did not load correctly.
                         Use the 'waitForAngular' function to ensure the page is ready for testing.`);
    }

    function getNativeElementTag(nativeElement) {
        return nativeElement.tagName.toLowerCase();
    }

    function getTagList(componentSelector) {
        return componentSelector.split(' ').filter(function (el) {
            return !!el;
        }).map(function (el) {
            return el.trim().toLowerCase();
        });
    }

    function filterNodes(rootElement, tags) {
        function walkElements(element, tagIndex, checkFn) {
            if (checkFn(element, tagIndex)) {
                if (tagIndex === tags.length - 1) {
                    if (walkingNativeElementsMode) foundNodes.push(element);else foundNodes.push(element.nativeElement);

                    return;
                }

                tagIndex++;
            }

            for (var _i2 = 0, _element$children2 = element.children, _length2 = _element$children2.length; _i2 < _length2; _i2++) {
                var childElement = _element$children2[_i2];
                walkElements(childElement, tagIndex, checkFn);
            }
        }

        function checkDebugElement(debugElement, tagIndex) {
            if (!debugElement.componentInstance) return false;

            return tags[tagIndex] === getNativeElementTag(debugElement.nativeElement);
        }

        function checkNativeElement(nativeElement, tagIndex) {
            var componentInstance = window.ng.getComponent(nativeElement);

            if (!componentInstance) return false;

            return tags[tagIndex] === getNativeElementTag(nativeElement);
        }

        var foundNodes = [];

        if (walkingNativeElementsMode) walkElements(rootElement, 0, checkNativeElement);else {
            var debugElementRoot = window.ng.probe(rootElement);

            walkElements(debugElementRoot, 0, checkDebugElement);
        }

        return foundNodes;
    }

    // NOTE: If there are multiple roots on the page we find a target in the first root only
    var rootElement = window.getAllAngularRootElements()[0];

    if (!complexSelector) return rootElement;

    var tags = getTagList(complexSelector);

    return filterNodes(rootElement, tags);
}).addCustomMethods({
    getAngular: function getAngular(node, fn) {
        var state = void 0;

        // NOTE: Angular version 9 or higher
        if (typeof window.ng.getComponent === 'function') {
            state = window.ng.getComponent(node);

            // NOTE: We cannot handle this circular reference in a replicator. So we remove it from the returned component state.
            if (state && '__ngContext__' in state) state = JSON.parse(JSON.stringify(state, function (key, value) {
                return key !== '__ngContext__' ? value : void 0;
            }));
        }
        // NOTE: Angular version 8 or lower
        else {
                var debugElement = window.ng.probe(node);

                state = debugElement && debugElement.componentInstance;
            }

        if (typeof fn === 'function') return fn({ state });

        return state;
    }
});